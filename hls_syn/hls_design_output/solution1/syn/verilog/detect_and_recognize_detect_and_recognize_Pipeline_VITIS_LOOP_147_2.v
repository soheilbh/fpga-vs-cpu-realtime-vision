// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module detect_and_recognize_detect_and_recognize_Pipeline_VITIS_LOOP_147_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        phi_mul3,
        frame_0_Addr_A,
        frame_0_EN_A,
        frame_0_WEN_A,
        frame_0_Din_A,
        frame_0_Dout_A,
        frame_1_Addr_A,
        frame_1_EN_A,
        frame_1_WEN_A,
        frame_1_Din_A,
        frame_1_Dout_A,
        frame_2_Addr_A,
        frame_2_EN_A,
        frame_2_WEN_A,
        frame_2_Din_A,
        frame_2_Dout_A,
        frame_3_Addr_A,
        frame_3_EN_A,
        frame_3_WEN_A,
        frame_3_Din_A,
        frame_3_Dout_A,
        frame_4_Addr_A,
        frame_4_EN_A,
        frame_4_WEN_A,
        frame_4_Din_A,
        frame_4_Dout_A,
        frame_5_Addr_A,
        frame_5_EN_A,
        frame_5_WEN_A,
        frame_5_Din_A,
        frame_5_Dout_A,
        frame_6_Addr_A,
        frame_6_EN_A,
        frame_6_WEN_A,
        frame_6_Din_A,
        frame_6_Dout_A,
        frame_7_Addr_A,
        frame_7_EN_A,
        frame_7_WEN_A,
        frame_7_Din_A,
        frame_7_Dout_A,
        x_out,
        x_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] phi_mul3;
output  [31:0] frame_0_Addr_A;
output   frame_0_EN_A;
output  [0:0] frame_0_WEN_A;
output  [7:0] frame_0_Din_A;
input  [7:0] frame_0_Dout_A;
output  [31:0] frame_1_Addr_A;
output   frame_1_EN_A;
output  [0:0] frame_1_WEN_A;
output  [7:0] frame_1_Din_A;
input  [7:0] frame_1_Dout_A;
output  [31:0] frame_2_Addr_A;
output   frame_2_EN_A;
output  [0:0] frame_2_WEN_A;
output  [7:0] frame_2_Din_A;
input  [7:0] frame_2_Dout_A;
output  [31:0] frame_3_Addr_A;
output   frame_3_EN_A;
output  [0:0] frame_3_WEN_A;
output  [7:0] frame_3_Din_A;
input  [7:0] frame_3_Dout_A;
output  [31:0] frame_4_Addr_A;
output   frame_4_EN_A;
output  [0:0] frame_4_WEN_A;
output  [7:0] frame_4_Din_A;
input  [7:0] frame_4_Dout_A;
output  [31:0] frame_5_Addr_A;
output   frame_5_EN_A;
output  [0:0] frame_5_WEN_A;
output  [7:0] frame_5_Din_A;
input  [7:0] frame_5_Dout_A;
output  [31:0] frame_6_Addr_A;
output   frame_6_EN_A;
output  [0:0] frame_6_WEN_A;
output  [7:0] frame_6_Din_A;
input  [7:0] frame_6_Dout_A;
output  [31:0] frame_7_Addr_A;
output   frame_7_EN_A;
output  [0:0] frame_7_WEN_A;
output  [7:0] frame_7_Din_A;
input  [7:0] frame_7_Dout_A;
output  [9:0] x_out;
output   x_out_ap_vld;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] x_out;
reg x_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] phi_urem_load_reg_411;
wire    ap_CS_fsm_state2;
reg   [9:0] x_1_reg_417;
wire   [0:0] icmp_ln147_fu_257_p2;
reg   [0:0] icmp_ln147_reg_422;
wire   [9:0] add_ln147_fu_263_p2;
reg   [9:0] add_ln147_reg_426;
reg   [20:0] phi_mul_load_reg_471;
wire    ap_CS_fsm_state3;
wire   [7:0] pixel_fu_303_p19;
reg   [7:0] pixel_reg_476;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_228_p4;
reg   [0:0] UnifiedRetVal_reg_224;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln148_1_fu_278_p1;
reg   [9:0] phi_urem_fu_94;
wire   [9:0] select_ln147_fu_363_p3;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln7_fu_348_p2;
reg   [20:0] phi_mul_fu_98;
wire   [20:0] add_ln147_1_fu_343_p2;
reg   [9:0] x_fu_102;
reg    frame_0_EN_A_local;
wire   [31:0] frame_0_Addr_A_local;
wire   [31:0] frame_0_Addr_A_orig;
reg    frame_1_EN_A_local;
wire   [31:0] frame_1_Addr_A_local;
wire   [31:0] frame_1_Addr_A_orig;
reg    frame_2_EN_A_local;
wire   [31:0] frame_2_Addr_A_local;
wire   [31:0] frame_2_Addr_A_orig;
reg    frame_3_EN_A_local;
wire   [31:0] frame_3_Addr_A_local;
wire   [31:0] frame_3_Addr_A_orig;
reg    frame_4_EN_A_local;
wire   [31:0] frame_4_Addr_A_local;
wire   [31:0] frame_4_Addr_A_orig;
reg    frame_5_EN_A_local;
wire   [31:0] frame_5_Addr_A_local;
wire   [31:0] frame_5_Addr_A_orig;
reg    frame_6_EN_A_local;
wire   [31:0] frame_6_Addr_A_local;
wire   [31:0] frame_6_Addr_A_orig;
reg    frame_7_EN_A_local;
wire   [31:0] frame_7_Addr_A_local;
wire   [31:0] frame_7_Addr_A_orig;
wire   [15:0] zext_ln148_fu_269_p1;
wire   [15:0] add_ln148_fu_273_p2;
wire   [7:0] pixel_fu_303_p17;
wire   [2:0] pixel_fu_303_p18;
wire   [0:0] icmp_ln147_1_fu_358_p2;
wire   [9:0] add_ln147_2_fu_353_p2;
reg   [0:0] ap_return_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire   [2:0] pixel_fu_303_p1;
wire   [2:0] pixel_fu_303_p3;
wire   [2:0] pixel_fu_303_p5;
wire   [2:0] pixel_fu_303_p7;
wire  signed [2:0] pixel_fu_303_p9;
wire  signed [2:0] pixel_fu_303_p11;
wire  signed [2:0] pixel_fu_303_p13;
wire  signed [2:0] pixel_fu_303_p15;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 phi_urem_fu_94 = 10'd0;
#0 phi_mul_fu_98 = 21'd0;
#0 x_fu_102 = 10'd0;
#0 ap_return_preg = 1'd0;
end

(* dissolve_hierarchy = "yes" *) detect_and_recognize_sparsemux_17_3_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 8 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 8 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
sparsemux_17_3_8_1_1_U1(
    .din0(frame_0_Dout_A),
    .din1(frame_1_Dout_A),
    .din2(frame_2_Dout_A),
    .din3(frame_3_Dout_A),
    .din4(frame_4_Dout_A),
    .din5(frame_5_Dout_A),
    .din6(frame_6_Dout_A),
    .din7(frame_7_Dout_A),
    .def(pixel_fu_303_p17),
    .sel(pixel_fu_303_p18),
    .dout(pixel_fu_303_p19)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_228_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln147_reg_422 == 1'd0))) begin
        UnifiedRetVal_reg_224 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        UnifiedRetVal_reg_224 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_fu_98 <= 21'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_fu_348_p2 == 1'd0) & (icmp_ln147_reg_422 == 1'd0))) begin
        phi_mul_fu_98 <= add_ln147_1_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_urem_fu_94 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_fu_348_p2 == 1'd0) & (icmp_ln147_reg_422 == 1'd0))) begin
        phi_urem_fu_94 <= select_ln147_fu_363_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_fu_102 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_fu_348_p2 == 1'd0) & (icmp_ln147_reg_422 == 1'd0))) begin
        x_fu_102 <= add_ln147_reg_426;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln147_reg_426 <= add_ln147_fu_263_p2;
        icmp_ln147_reg_422 <= icmp_ln147_fu_257_p2;
        phi_urem_load_reg_411 <= phi_urem_fu_94;
        x_1_reg_417 <= x_fu_102;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        phi_mul_load_reg_471 <= phi_mul_fu_98;
        pixel_reg_476 <= pixel_fu_303_p19;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln147_reg_422 == 1'd0))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_228_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_228_p4 = UnifiedRetVal_reg_224;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_228_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        frame_0_EN_A_local = 1'b1;
    end else begin
        frame_0_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        frame_1_EN_A_local = 1'b1;
    end else begin
        frame_1_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        frame_2_EN_A_local = 1'b1;
    end else begin
        frame_2_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        frame_3_EN_A_local = 1'b1;
    end else begin
        frame_3_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        frame_4_EN_A_local = 1'b1;
    end else begin
        frame_4_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        frame_5_EN_A_local = 1'b1;
    end else begin
        frame_5_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        frame_6_EN_A_local = 1'b1;
    end else begin
        frame_6_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        frame_7_EN_A_local = 1'b1;
    end else begin
        frame_7_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_out = 10'd800;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln147_reg_422 == 1'd0))) begin
        x_out = x_1_reg_417;
    end else begin
        x_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln147_reg_422 == 1'd0)))) begin
        x_out_ap_vld = 1'b1;
    end else begin
        x_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_fu_348_p2 == 1'd0) & (icmp_ln147_reg_422 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln147_reg_422 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln147_1_fu_343_p2 = (phi_mul_load_reg_471 + 21'd1311);

assign add_ln147_2_fu_353_p2 = (phi_urem_load_reg_411 + 10'd1);

assign add_ln147_fu_263_p2 = (x_fu_102 + 10'd1);

assign add_ln148_fu_273_p2 = (phi_mul3 + zext_ln148_fu_269_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign frame_0_Addr_A = frame_0_Addr_A_local;

assign frame_0_Addr_A_local = frame_0_Addr_A_orig << 32'd0;

assign frame_0_Addr_A_orig = zext_ln148_1_fu_278_p1;

assign frame_0_Din_A = 8'd0;

assign frame_0_EN_A = frame_0_EN_A_local;

assign frame_0_WEN_A = 1'd0;

assign frame_1_Addr_A = frame_1_Addr_A_local;

assign frame_1_Addr_A_local = frame_1_Addr_A_orig << 32'd0;

assign frame_1_Addr_A_orig = zext_ln148_1_fu_278_p1;

assign frame_1_Din_A = 8'd0;

assign frame_1_EN_A = frame_1_EN_A_local;

assign frame_1_WEN_A = 1'd0;

assign frame_2_Addr_A = frame_2_Addr_A_local;

assign frame_2_Addr_A_local = frame_2_Addr_A_orig << 32'd0;

assign frame_2_Addr_A_orig = zext_ln148_1_fu_278_p1;

assign frame_2_Din_A = 8'd0;

assign frame_2_EN_A = frame_2_EN_A_local;

assign frame_2_WEN_A = 1'd0;

assign frame_3_Addr_A = frame_3_Addr_A_local;

assign frame_3_Addr_A_local = frame_3_Addr_A_orig << 32'd0;

assign frame_3_Addr_A_orig = zext_ln148_1_fu_278_p1;

assign frame_3_Din_A = 8'd0;

assign frame_3_EN_A = frame_3_EN_A_local;

assign frame_3_WEN_A = 1'd0;

assign frame_4_Addr_A = frame_4_Addr_A_local;

assign frame_4_Addr_A_local = frame_4_Addr_A_orig << 32'd0;

assign frame_4_Addr_A_orig = zext_ln148_1_fu_278_p1;

assign frame_4_Din_A = 8'd0;

assign frame_4_EN_A = frame_4_EN_A_local;

assign frame_4_WEN_A = 1'd0;

assign frame_5_Addr_A = frame_5_Addr_A_local;

assign frame_5_Addr_A_local = frame_5_Addr_A_orig << 32'd0;

assign frame_5_Addr_A_orig = zext_ln148_1_fu_278_p1;

assign frame_5_Din_A = 8'd0;

assign frame_5_EN_A = frame_5_EN_A_local;

assign frame_5_WEN_A = 1'd0;

assign frame_6_Addr_A = frame_6_Addr_A_local;

assign frame_6_Addr_A_local = frame_6_Addr_A_orig << 32'd0;

assign frame_6_Addr_A_orig = zext_ln148_1_fu_278_p1;

assign frame_6_Din_A = 8'd0;

assign frame_6_EN_A = frame_6_EN_A_local;

assign frame_6_WEN_A = 1'd0;

assign frame_7_Addr_A = frame_7_Addr_A_local;

assign frame_7_Addr_A_local = frame_7_Addr_A_orig << 32'd0;

assign frame_7_Addr_A_orig = zext_ln148_1_fu_278_p1;

assign frame_7_Din_A = 8'd0;

assign frame_7_EN_A = frame_7_EN_A_local;

assign frame_7_WEN_A = 1'd0;

assign icmp_ln147_1_fu_358_p2 = ((phi_urem_load_reg_411 == 10'd99) ? 1'b1 : 1'b0);

assign icmp_ln147_fu_257_p2 = ((x_fu_102 == 10'd800) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_348_p2 = ((pixel_reg_476 > 8'd160) ? 1'b1 : 1'b0);

assign pixel_fu_303_p17 = 'bx;

assign pixel_fu_303_p18 = {{phi_mul_fu_98[19:17]}};

assign select_ln147_fu_363_p3 = ((icmp_ln147_1_fu_358_p2[0:0] == 1'b1) ? 10'd0 : add_ln147_2_fu_353_p2);

assign zext_ln148_1_fu_278_p1 = add_ln148_fu_273_p2;

assign zext_ln148_fu_269_p1 = phi_urem_fu_94;

endmodule //detect_and_recognize_detect_and_recognize_Pipeline_VITIS_LOOP_147_2
