-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity detect_and_recognize_recognize_character is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    blob_prefix_sum_val : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (6 downto 0) );
end;


architecture behav of detect_and_recognize_recognize_character is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_5F : STD_LOGIC_VECTOR (6 downto 0) := "1011111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1A : STD_LOGIC_VECTOR (7 downto 0) := "00011010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal char_prefix_sums_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal char_prefix_sums_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal prefix_sum_to_char_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal prefix_sum_to_char_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln29_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_232 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_150_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_reg_256 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln13_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_268 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal left_5_fu_189_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal left_5_reg_272 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_5_fu_196_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_5_reg_278 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln36_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_287 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_phi_mux_mid_phi_fu_91_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mid_reg_88 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln9_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_result_write_assign_phi_fu_103_p6 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_write_assign_reg_98 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln13_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal left_fu_48 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal right_fu_52 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal char_prefix_sums_ce0_local : STD_LOGIC;
    signal prefix_sum_to_char_ce0_local : STD_LOGIC;
    signal zext_ln11_fu_136_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln11_1_fu_140_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln11_fu_144_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln13_1_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln15_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal left_4_fu_179_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_4_fu_184_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component detect_and_recognize_recognize_character_char_prefix_sums_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component detect_and_recognize_recognize_character_prefix_sum_to_char_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    char_prefix_sums_U : component detect_and_recognize_recognize_character_char_prefix_sums_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 27,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => char_prefix_sums_address0,
        ce0 => char_prefix_sums_ce0_local,
        q0 => char_prefix_sums_q0);

    prefix_sum_to_char_U : component detect_and_recognize_recognize_character_prefix_sum_to_char_ROM_AUTO_1R
    generic map (
        DataWidth => 7,
        AddressRange => 27,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => prefix_sum_to_char_address0,
        ce0 => prefix_sum_to_char_ce0_local,
        q0 => prefix_sum_to_char_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv7_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_return_preg <= ap_phi_mux_result_write_assign_phi_fu_103_p6;
                end if; 
            end if;
        end if;
    end process;


    left_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                left_fu_48 <= ap_const_lv8_0;
            elsif (((icmp_ln13_reg_268 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                left_fu_48 <= left_5_reg_272;
            end if; 
        end if;
    end process;

    mid_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_203_p2 = ap_const_lv1_1) and (icmp_ln13_reg_268 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                mid_reg_88 <= ap_const_lv8_1B;
            elsif (((icmp_ln13_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                mid_reg_88 <= trunc_ln_reg_256;
            end if; 
        end if;
    end process;

    result_write_assign_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (((icmp_ln9_fu_203_p2 = ap_const_lv1_1) and (icmp_ln36_fu_215_p2 = ap_const_lv1_0)) or ((icmp_ln36_fu_215_p2 = ap_const_lv1_0) and (icmp_ln13_reg_268 = ap_const_lv1_1))))) then 
                result_write_assign_reg_98 <= ap_const_lv7_3F;
            elsif (((icmp_ln29_fu_114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                result_write_assign_reg_98 <= ap_const_lv7_5F;
            elsif (((icmp_ln36_reg_287 = ap_const_lv1_1) and (icmp_ln29_reg_232 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                result_write_assign_reg_98 <= prefix_sum_to_char_q0;
            end if; 
        end if;
    end process;

    right_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                right_fu_52 <= ap_const_lv8_1A;
            elsif (((icmp_ln13_reg_268 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                right_fu_52 <= right_5_reg_278;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln13_reg_268 <= icmp_ln13_fu_169_p2;
                left_5_reg_272 <= left_5_fu_189_p3;
                right_5_reg_278 <= right_5_fu_196_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln29_reg_232 <= icmp_ln29_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln36_reg_287 <= icmp_ln36_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln_reg_256 <= add_ln11_fu_144_p2(8 downto 1);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln29_fu_114_p2, icmp_ln13_reg_268, ap_CS_fsm_state4, icmp_ln9_fu_203_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln29_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln29_fu_114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln9_fu_203_p2 = ap_const_lv1_1) or (icmp_ln13_reg_268 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln11_fu_144_p2 <= std_logic_vector(unsigned(zext_ln11_fu_136_p1) + unsigned(zext_ln11_1_fu_140_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_mid_phi_fu_91_p4_assign_proc : process(icmp_ln13_reg_268, ap_CS_fsm_state4, mid_reg_88, icmp_ln9_fu_203_p2)
    begin
        if (((icmp_ln9_fu_203_p2 = ap_const_lv1_1) and (icmp_ln13_reg_268 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_phi_mux_mid_phi_fu_91_p4 <= ap_const_lv8_1B;
        else 
            ap_phi_mux_mid_phi_fu_91_p4 <= mid_reg_88;
        end if; 
    end process;


    ap_phi_mux_result_write_assign_phi_fu_103_p6_assign_proc : process(prefix_sum_to_char_q0, icmp_ln29_reg_232, icmp_ln36_reg_287, result_write_assign_reg_98, ap_CS_fsm_state5)
    begin
        if (((icmp_ln36_reg_287 = ap_const_lv1_1) and (icmp_ln29_reg_232 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_result_write_assign_phi_fu_103_p6 <= prefix_sum_to_char_q0;
        else 
            ap_phi_mux_result_write_assign_phi_fu_103_p6 <= result_write_assign_reg_98;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_result_write_assign_phi_fu_103_p6, ap_CS_fsm_state5, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_return <= ap_phi_mux_result_write_assign_phi_fu_103_p6;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    char_prefix_sums_address0 <= zext_ln13_fu_160_p1(5 - 1 downto 0);

    char_prefix_sums_ce0_local_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            char_prefix_sums_ce0_local <= ap_const_logic_1;
        else 
            char_prefix_sums_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln13_fu_169_p2 <= "1" when (zext_ln13_1_fu_165_p1 = blob_prefix_sum_val) else "0";
    icmp_ln15_fu_174_p2 <= "1" when (signed(zext_ln13_1_fu_165_p1) < signed(blob_prefix_sum_val)) else "0";
    icmp_ln29_fu_114_p2 <= "1" when (blob_prefix_sum_val = ap_const_lv32_0) else "0";
    icmp_ln36_fu_215_p2 <= "1" when (unsigned(ap_phi_mux_mid_phi_fu_91_p4) < unsigned(ap_const_lv8_1B)) else "0";
    icmp_ln9_fu_203_p2 <= "1" when (unsigned(left_5_reg_272) > unsigned(right_5_reg_278)) else "0";
    left_4_fu_179_p2 <= std_logic_vector(unsigned(trunc_ln_reg_256) + unsigned(ap_const_lv8_1));
    left_5_fu_189_p3 <= 
        left_4_fu_179_p2 when (icmp_ln15_fu_174_p2(0) = '1') else 
        left_fu_48;
    prefix_sum_to_char_address0 <= zext_ln37_fu_221_p1(5 - 1 downto 0);

    prefix_sum_to_char_ce0_local_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prefix_sum_to_char_ce0_local <= ap_const_logic_1;
        else 
            prefix_sum_to_char_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    right_4_fu_184_p2 <= std_logic_vector(unsigned(trunc_ln_reg_256) + unsigned(ap_const_lv8_FF));
    right_5_fu_196_p3 <= 
        right_fu_52 when (icmp_ln15_fu_174_p2(0) = '1') else 
        right_4_fu_184_p2;
    trunc_ln_fu_150_p4 <= add_ln11_fu_144_p2(8 downto 1);
    zext_ln11_1_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(right_fu_52),9));
    zext_ln11_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(left_fu_48),9));
    zext_ln13_1_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(char_prefix_sums_q0),32));
    zext_ln13_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_150_p4),64));
    zext_ln37_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_mid_phi_fu_91_p4),64));
end behav;
