// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module detect_and_recognize_recognize_character (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        blob_prefix_sum_val,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] blob_prefix_sum_val;
output  [6:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] ap_return;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] char_prefix_sums_address0;
wire   [8:0] char_prefix_sums_q0;
wire   [4:0] prefix_sum_to_char_address0;
wire   [6:0] prefix_sum_to_char_q0;
wire   [0:0] icmp_ln29_fu_114_p2;
reg   [0:0] icmp_ln29_reg_232;
wire   [7:0] trunc_ln_fu_150_p4;
reg   [7:0] trunc_ln_reg_256;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln13_fu_169_p2;
reg   [0:0] icmp_ln13_reg_268;
wire    ap_CS_fsm_state3;
wire   [7:0] left_5_fu_189_p3;
reg   [7:0] left_5_reg_272;
wire   [7:0] right_5_fu_196_p3;
reg   [7:0] right_5_reg_278;
wire   [0:0] icmp_ln36_fu_215_p2;
reg   [0:0] icmp_ln36_reg_287;
wire    ap_CS_fsm_state4;
reg   [7:0] ap_phi_mux_mid_phi_fu_91_p4;
reg   [7:0] mid_reg_88;
wire   [0:0] icmp_ln9_fu_203_p2;
reg   [6:0] ap_phi_mux_result_write_assign_phi_fu_103_p6;
reg   [6:0] result_write_assign_reg_98;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln13_fu_160_p1;
wire   [63:0] zext_ln37_fu_221_p1;
reg   [7:0] left_fu_48;
reg   [7:0] right_fu_52;
reg    char_prefix_sums_ce0_local;
reg    prefix_sum_to_char_ce0_local;
wire   [8:0] zext_ln11_fu_136_p1;
wire   [8:0] zext_ln11_1_fu_140_p1;
wire   [8:0] add_ln11_fu_144_p2;
wire   [31:0] zext_ln13_1_fu_165_p1;
wire   [0:0] icmp_ln15_fu_174_p2;
wire   [7:0] left_4_fu_179_p2;
wire   [7:0] right_4_fu_184_p2;
reg   [6:0] ap_return_preg;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 left_fu_48 = 8'd0;
#0 right_fu_52 = 8'd0;
#0 ap_return_preg = 7'd0;
end

detect_and_recognize_recognize_character_char_prefix_sums_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 27 ),
    .AddressWidth( 5 ))
char_prefix_sums_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(char_prefix_sums_address0),
    .ce0(char_prefix_sums_ce0_local),
    .q0(char_prefix_sums_q0)
);

detect_and_recognize_recognize_character_prefix_sum_to_char_ROM_AUTO_1R #(
    .DataWidth( 7 ),
    .AddressRange( 27 ),
    .AddressWidth( 5 ))
prefix_sum_to_char_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(prefix_sum_to_char_address0),
    .ce0(prefix_sum_to_char_ce0_local),
    .q0(prefix_sum_to_char_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 7'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_preg <= ap_phi_mux_result_write_assign_phi_fu_103_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        left_fu_48 <= 8'd0;
    end else if (((icmp_ln13_reg_268 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        left_fu_48 <= left_5_reg_272;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_203_p2 == 1'd1) & (icmp_ln13_reg_268 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mid_reg_88 <= 8'd27;
    end else if (((icmp_ln13_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        mid_reg_88 <= trunc_ln_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (((icmp_ln9_fu_203_p2 == 1'd1) & (icmp_ln36_fu_215_p2 == 1'd0)) | ((icmp_ln36_fu_215_p2 == 1'd0) & (icmp_ln13_reg_268 == 1'd1))))) begin
        result_write_assign_reg_98 <= 7'd63;
    end else if (((icmp_ln29_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        result_write_assign_reg_98 <= 7'd95;
    end else if (((icmp_ln36_reg_287 == 1'd1) & (icmp_ln29_reg_232 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        result_write_assign_reg_98 <= prefix_sum_to_char_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        right_fu_52 <= 8'd26;
    end else if (((icmp_ln13_reg_268 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        right_fu_52 <= right_5_reg_278;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln13_reg_268 <= icmp_ln13_fu_169_p2;
        left_5_reg_272 <= left_5_fu_189_p3;
        right_5_reg_278 <= right_5_fu_196_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln29_reg_232 <= icmp_ln29_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln36_reg_287 <= icmp_ln36_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln_reg_256 <= {{add_ln11_fu_144_p2[8:1]}};
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_203_p2 == 1'd1) & (icmp_ln13_reg_268 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_phi_mux_mid_phi_fu_91_p4 = 8'd27;
    end else begin
        ap_phi_mux_mid_phi_fu_91_p4 = mid_reg_88;
    end
end

always @ (*) begin
    if (((icmp_ln36_reg_287 == 1'd1) & (icmp_ln29_reg_232 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_result_write_assign_phi_fu_103_p6 = prefix_sum_to_char_q0;
    end else begin
        ap_phi_mux_result_write_assign_phi_fu_103_p6 = result_write_assign_reg_98;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return = ap_phi_mux_result_write_assign_phi_fu_103_p6;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        char_prefix_sums_ce0_local = 1'b1;
    end else begin
        char_prefix_sums_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        prefix_sum_to_char_ce0_local = 1'b1;
    end else begin
        prefix_sum_to_char_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln29_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln29_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln9_fu_203_p2 == 1'd1) | (icmp_ln13_reg_268 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_144_p2 = (zext_ln11_fu_136_p1 + zext_ln11_1_fu_140_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign char_prefix_sums_address0 = zext_ln13_fu_160_p1;

assign icmp_ln13_fu_169_p2 = ((zext_ln13_1_fu_165_p1 == blob_prefix_sum_val) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_174_p2 = (($signed(zext_ln13_1_fu_165_p1) < $signed(blob_prefix_sum_val)) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_114_p2 = ((blob_prefix_sum_val == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_215_p2 = ((ap_phi_mux_mid_phi_fu_91_p4 < 8'd27) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_203_p2 = ((left_5_reg_272 > right_5_reg_278) ? 1'b1 : 1'b0);

assign left_4_fu_179_p2 = (trunc_ln_reg_256 + 8'd1);

assign left_5_fu_189_p3 = ((icmp_ln15_fu_174_p2[0:0] == 1'b1) ? left_4_fu_179_p2 : left_fu_48);

assign prefix_sum_to_char_address0 = zext_ln37_fu_221_p1;

assign right_4_fu_184_p2 = ($signed(trunc_ln_reg_256) + $signed(8'd255));

assign right_5_fu_196_p3 = ((icmp_ln15_fu_174_p2[0:0] == 1'b1) ? right_fu_52 : right_4_fu_184_p2);

assign trunc_ln_fu_150_p4 = {{add_ln11_fu_144_p2[8:1]}};

assign zext_ln11_1_fu_140_p1 = right_fu_52;

assign zext_ln11_fu_136_p1 = left_fu_48;

assign zext_ln13_1_fu_165_p1 = char_prefix_sums_q0;

assign zext_ln13_fu_160_p1 = trunc_ln_fu_150_p4;

assign zext_ln37_fu_221_p1 = ap_phi_mux_mid_phi_fu_91_p4;

endmodule //detect_and_recognize_recognize_character
